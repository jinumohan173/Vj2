
#include <pt.h>
#include <ESP8266WiFi.h>
#include <MQTT.h>
// pin 11 of 74HC595 (SHCP)
const int bit_clock_pin = D2;
// pin 12 of 74HC595 (STCP)
const int digit_clock_pin = D1;
// pin 14 of 74HC595 (DS)
const int data_pin = D0;

int current_sensor1 = D3;
int current_sensor2 = D7;//change thid to D4 at final stage
int current_sensor3 = D5;
int current_sensor4 = D6;

int Status_Read()
{
int switch1 = digitalRead(current_sensor1);
int switch2 = digitalRead(current_sensor2);
int switch3 = digitalRead(current_sensor3);
int switch4 = digitalRead(current_sensor4);

int current_status = switch1*1+switch2*2+switch3*4+switch4*8;

return  current_status;
}


const char ssid[] = "kk_nivas";
const char pass[] = "9495989074";

WiFiClient net;
MQTTClient client;

unsigned long lastMillis = 0;

void connect() {
  Serial.print("checking wifi...");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }

  Serial.print("\nconnecting...");
  while (!client.connect("arduino", "try", "try")) {
    Serial.print(".");
    delay(1000);
  }

  Serial.println("\nconnected!");

  client.subscribe("R1");
  // client.unsubscribe("/hello");
}

void messageReceived(String &topic, String &payload) {
  Serial.println("incoming: " + topic + " - " + payload);
}


void setup() {
  // put your setup code here, to run once:
 Serial.begin(9600); 

WiFi.begin(ssid, pass);

  // Note: Local domain names (e.g. "Computer.local" on OSX) are not supported by Arduino.
  // You need to set the IP address directly.
  client.begin("192.168.1.7", net);
  client.onMessage(messageReceived);

  connect();
 
}

void loop() {


client.loop();

int previous_status = Status_Read();
delay(1000);
int current_status = Status_Read();

if(previous_status != current_status)
{
  String current_status_data = "current_status : " ;
  
  current_status_data += current_status;

  String previous_status_data = "previous_status : "  ;
  
  previous_status_data += previous_status;
  Serial.println("current_status: ");
  Serial.println(current_status_data);
  Serial.println("state changes");
  Serial.println("data publishing ");
  Serial.println("previous_status: ");
  Serial.println(previous_status_data);
  client.publish("Master_control", current_status_data);
   client.publish("Master_control", previous_status_data);
  }
else{
  Serial.println("do nothing");
  }


 

}